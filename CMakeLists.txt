# Set the minimum cmake version
CMAKE_MINIMUM_REQUIRED(VERSION 3.10)

SET(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS ON)


IF(UNIX)
SET(CMAKE_CXX_STANDARD 20)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++20")
ELSE()
# Set the C++ standard
#SET(CMAKE_CXX_STANDARD 14)
#SET(CMAKE_CXX_STANDARD 17)
#SET(CMAKE_CXX_STANDARD 20)
ENDIF()

SET(PROJECT_VERSION 0.1)

# Set the project name
PROJECT(securityheaders VERSION ${PROJECT_VERSION} DESCRIPTION "Security headers library")

SET(PROJECT_DIRECTORY "./")

# Debug build
SET(CMAKE_BUILD_TYPE Debug)
ADD_DEFINITIONS("-DDEBUG")

# Release build
#SET(CMAKE_BUILD_TYPE Release)
#ADD_DEFINITIONS("-DNDEBUG")

# ASAN build
#SET(ASAN true)

# MSAN build
# NOTE: This complains that -pie is unused?
#SET(MSAN true)

# UBSAN build
#SET(UBSAN true)

IF(ASAN)
SET(OPTIONAL_ASAN_FLAGS "-fsanitize=address -fno-omit-frame-pointer")
ENDIF()

IF(MSAN)
SET(OPTIONAL_MSAN_FLAGS "-fsanitize=memory -fno-omit-frame-pointer -fPIE -pie")
ENDIF()

IF(UBSAN)
SET(OPTIONAL_UBSAN_FLAGS "-fsanitize=vptr")
ENDIF()

SET(OPTIONAL_FLAGS "${OPTIONAL_ASAN_FLAGS} ${OPTIONAL_MSAN_FLAGS} ${OPTIONAL_UBSAN_FLAGS}")

# Select flags
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2 ${OPTIONAL_FLAGS}")
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -g ${OPTIONAL_FLAGS}")
SET(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} ${OPTIONAL_FLAGS}")
SET(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} ${OPTIONAL_FLAGS}")
SET(CMAKE_LINKER_FLAGS_RELEASE "${CMAKE_LINKER_FLAGS_RELEASE} ${OPTIONAL_FLAGS}")
SET(CMAKE_LINKER_FLAGS_DEBUG "${CMAKE_LINKER_FLAGS_DEBUG} ${OPTIONAL_FLAGS}")

IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_LINKER_FLAGS_RELEASE}")
ELSE()
SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")
SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_LINKER_FLAGS_DEBUG}")
ENDIF()

IF(UNIX)
# Add definitions, compiler switches, etc.
ADD_DEFINITIONS("-std=c++20 -Wall -W -Wextra -Werror -Wformat -Wformat-y2k -Winit-self -Wstack-protector -Wunknown-pragmas -Wundef -Wwrite-strings -Wno-unused-parameter -Wpointer-arith -Wno-switch -Woverloaded-virtual -Wno-stack-protector -Wmissing-include-dirs -Wuninitialized -O2")
ENDIF()

IF(UNIX)
  ADD_DEFINITIONS("-D__LINUX__")
ENDIF()

IF(WIN32)
  ADD_DEFINITIONS("-DUNICODE -D_UNICODE")
  ADD_DEFINITIONS("-DNOMINMAX")
ENDIF()

#INCLUDE_DIRECTORIES(./include/)


# Security headers example
FILE(GLOB EXAMPLE_SRC_FILES ${PROJECT_SOURCE_DIR}/example/*.cpp)
ADD_EXECUTABLE(securityheaders_example ${EXAMPLE_SRC_FILES})


INCLUDE(FindPkgConfig)

#SET(LIBRARIES
#  external_library
#)


# Tests
SET(PROJECT_TEST_NAME ${PROJECT_NAME}_test)
INCLUDE_DIRECTORIES(${GTEST_INCLUDE_DIRS} ./include/)
FILE(GLOB TEST_SRC_FILES ${PROJECT_SOURCE_DIR}/test/src/*.cpp)
ADD_EXECUTABLE(${PROJECT_TEST_NAME} ${TEST_SRC_FILES})

SET(LIBRARIES_LINKED_UNITTEST
  gtest
)

TARGET_LINK_LIBRARIES(${PROJECT_TEST_NAME}
    ${LIBRARIES_LINKED_UNITTEST}
)
